// Definizione della funzione                
def buildAndPushTag(Map args) {
    def defaults = [
        registryUrl: "https://registry.hub.docker.com",
        repository: "t0mx2as0/modulo_form",
        dockerfileDir: "./app",
        dockerfileName: "Dockerfile",
        buildArgs: "",
        pushLatest: true
    ]
    args = defaults + args
    docker.withRegistry(args.registryUrl, 'DockerHub-creds') {
        def image = docker.build(args.image, "${args.buildArgs} ${args.dockerfileDir} -t ${args.repository}")
        println "Image: ${args.repository}"
            image.push(args.buildTag)
            if (args.pushLatest) {
                image.push("latest")
                sh "docker rmi --force ${args.image}:latest"
            }
        sh "docker rmi --force ${args.image}:${args.buildTag}"
        return "${args.image}:${args.buildTag}"
    }
}

pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = 'docker.io/t0mx2as0'
        DOCKER_IMAGE_NAME = 'myapp'
        DOCKER_BUILD_TAG = "${env.BUILD_ID}"
    }

    stages {
        stage('Build and Push Docker Image') {
            steps {
                script {
                    // Chiamata della funzione
                    buildAndPushTag(image: env.DOCKER_IMAGE_NAME, buildTag: env.DOCKER_BUILD_TAG)
                }
            }
        }
    }

    post {
        failure {
            echo 'Errore nella pipeline!'
        }
    }
}
